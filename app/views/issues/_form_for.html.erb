<%# 
参考文章： https://medium.com/%E5%BB%A2%E7%89%A9%E5%88%B0%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E9%80%B2%E5%8C%96%E9%81%8E%E7%A8%8B/rails-form-for-vs-form-tag-vs-form-with-%E7%9A%84%E5%B7%AE%E5%88%A5-ee936e2fe73
API： https://apidock.com/rails/ActionView/Helpers/FormHelper/form_for

1. form_for：在使用模型时非常便利，很会猜。。你不太需要告诉它要发布去哪里。
（1） 这个是form_for里可以定义的参数
form_for（@user，url：users_path）＃这个会去找用post方法去找user＃create
form_for（@user，url：user_path（@user），html：{method：“ patch”}）＃这个也会去找user＃create并在html内赋method =“ patch”这个属性


（2） 但是其实上，form_for可以自动的去寻找合适的action，

form_for（@user）＃如果这个@user是全新的话会往user＃create去
                ＃如果这个@user已经存在的话会往user＃update去

（3） 用form_for送出的params里面会包含表单的内容 
当input 使用 f.text_field 等类型时，form_for这个helper会直接接内容包成model name：{栏位名称：内容，栏位名称：内容}这样形式的Hash；
当input 使用 text_field_tag等类型时， 传递的参数还是为 params[:栏位内容]


(4) 默认是发送html请求，如果需要使用ajax，需添加 remote: true

%>

<%= form_for @issue, remote: true, html: {id: "", class: ""} do |f| %>
  Issue Title: <%= f.text_field :title %><br />
  Issue Content : <%= f.text_area :content %><br />
  <%= f.submit "submit" %>
<% end %>